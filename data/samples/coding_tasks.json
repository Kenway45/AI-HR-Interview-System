{
  "tasks": [
    {
      "id": "easy_array_sum",
      "title": "Array Sum",
      "difficulty": "easy",
      "language": "python",
      "description": "Write a function that takes an array of integers and returns the sum of all elements. Handle edge cases like empty arrays.",
      "starter_code": "def array_sum(arr):\n    \"\"\"\n    Calculate the sum of all elements in an array.\n    \n    Args:\n        arr: List of integers\n    \n    Returns:\n        int: Sum of all elements, 0 for empty array\n    \"\"\"\n    # Your code here\n    pass",
      "test_cases": [
        {
          "input": "[1, 2, 3, 4, 5]",
          "expected_output": "15",
          "description": "Basic positive numbers"
        },
        {
          "input": "[10, -5, 3]",
          "expected_output": "8",
          "description": "Mixed positive and negative numbers"
        },
        {
          "input": "[]",
          "expected_output": "0",
          "description": "Empty array should return 0"
        },
        {
          "input": "[-1, -2, -3]",
          "expected_output": "-6",
          "description": "All negative numbers"
        }
      ],
      "solution": "def array_sum(arr):\n    return sum(arr) if arr else 0"
    },
    {
      "id": "medium_two_sum",
      "title": "Two Sum",
      "difficulty": "medium",
      "language": "python",
      "description": "Given an array of integers and a target sum, return the indices of two numbers that add up to the target. You may assume that each input has exactly one solution, and you may not use the same element twice.",
      "starter_code": "def two_sum(nums, target):\n    \"\"\"\n    Find two numbers in the array that add up to target.\n    \n    Args:\n        nums: List of integers\n        target: Integer target sum\n    \n    Returns:\n        List[int]: Indices of the two numbers that add up to target\n    \"\"\"\n    # Your code here\n    pass",
      "test_cases": [
        {
          "input": "[2, 7, 11, 15], 9",
          "expected_output": "[0, 1]",
          "description": "First example: 2 + 7 = 9"
        },
        {
          "input": "[3, 2, 4], 6",
          "expected_output": "[1, 2]",
          "description": "Second example: 2 + 4 = 6"
        },
        {
          "input": "[3, 3], 6",
          "expected_output": "[0, 1]",
          "description": "Same numbers: 3 + 3 = 6"
        }
      ],
      "solution": "def two_sum(nums, target):\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []"
    },
    {
      "id": "medium_valid_parentheses",
      "title": "Valid Parentheses",
      "difficulty": "medium",
      "language": "python",
      "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets, and open brackets must be closed in the correct order.",
      "starter_code": "def is_valid(s):\n    \"\"\"\n    Check if parentheses in string are valid.\n    \n    Args:\n        s: String containing parentheses\n    \n    Returns:\n        bool: True if valid, False otherwise\n    \"\"\"\n    # Your code here\n    pass",
      "test_cases": [
        {
          "input": "\"()\"",
          "expected_output": "True",
          "description": "Simple valid parentheses"
        },
        {
          "input": "\"()[]{}\"",
          "expected_output": "True",
          "description": "Multiple types of valid brackets"
        },
        {
          "input": "\"(]\"",
          "expected_output": "False",
          "description": "Mismatched bracket types"
        },
        {
          "input": "\"([)]\"",
          "expected_output": "False",
          "description": "Incorrect nesting order"
        },
        {
          "input": "\"{[]}\"",
          "expected_output": "True",
          "description": "Properly nested brackets"
        }
      ],
      "solution": "def is_valid(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    \n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack"
    },
    {
      "id": "hard_merge_intervals",
      "title": "Merge Intervals",
      "difficulty": "hard",
      "language": "python",
      "description": "Given an array of intervals where intervals[i] = [start_i, end_i], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.",
      "starter_code": "def merge_intervals(intervals):\n    \"\"\"\n    Merge overlapping intervals.\n    \n    Args:\n        intervals: List of intervals [start, end]\n    \n    Returns:\n        List[List[int]]: Merged intervals\n    \"\"\"\n    # Your code here\n    pass",
      "test_cases": [
        {
          "input": "[[1,3],[2,6],[8,10],[15,18]]",
          "expected_output": "[[1,6],[8,10],[15,18]]",
          "description": "Merge overlapping intervals [1,3] and [2,6]"
        },
        {
          "input": "[[1,4],[4,5]]",
          "expected_output": "[[1,5]]",
          "description": "Merge touching intervals"
        },
        {
          "input": "[[1,4],[2,3]]",
          "expected_output": "[[1,4]]",
          "description": "One interval completely inside another"
        }
      ],
      "solution": "def merge_intervals(intervals):\n    if not intervals:\n        return []\n    \n    intervals.sort(key=lambda x: x[0])\n    merged = [intervals[0]]\n    \n    for current in intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:\n            last[1] = max(last[1], current[1])\n        else:\n            merged.append(current)\n    \n    return merged"
    },
    {
      "id": "api_design_task",
      "title": "REST API Design",
      "difficulty": "medium",
      "language": "python",
      "description": "Design a simple REST API endpoint for a user management system. Implement a function that validates user registration data and returns appropriate responses.",
      "starter_code": "def validate_user_registration(user_data):\n    \"\"\"\n    Validate user registration data for a REST API.\n    \n    Args:\n        user_data: Dict with keys 'username', 'email', 'password'\n    \n    Returns:\n        Dict: {'valid': bool, 'errors': List[str], 'status_code': int}\n    \"\"\"\n    # Your code here\n    pass",
      "test_cases": [
        {
          "input": "{\"username\": \"john_doe\", \"email\": \"john@example.com\", \"password\": \"SecurePass123!\"}",
          "expected_output": "{\"valid\": True, \"errors\": [], \"status_code\": 201}",
          "description": "Valid user data should return success"
        },
        {
          "input": "{\"username\": \"ab\", \"email\": \"invalid-email\", \"password\": \"123\"}",
          "expected_output": "{\"valid\": False, \"errors\": [\"Username too short\", \"Invalid email format\", \"Password too weak\"], \"status_code\": 400}",
          "description": "Invalid data should return appropriate errors"
        },
        {
          "input": "{\"username\": \"testuser\", \"email\": \"test@example.com\"}",
          "expected_output": "{\"valid\": False, \"errors\": [\"Password is required\"], \"status_code\": 400}",
          "description": "Missing required fields"
        }
      ],
      "solution": "import re\n\ndef validate_user_registration(user_data):\n    errors = []\n    \n    # Check required fields\n    required_fields = ['username', 'email', 'password']\n    for field in required_fields:\n        if field not in user_data or not user_data[field]:\n            errors.append(f\"{field.capitalize()} is required\")\n            continue\n    \n    if not errors:\n        # Validate username\n        if len(user_data['username']) < 3:\n            errors.append(\"Username too short\")\n        \n        # Validate email\n        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n        if not re.match(email_pattern, user_data['email']):\n            errors.append(\"Invalid email format\")\n        \n        # Validate password\n        password = user_data['password']\n        if len(password) < 8:\n            errors.append(\"Password too weak\")\n    \n    return {\n        'valid': len(errors) == 0,\n        'errors': errors,\n        'status_code': 201 if len(errors) == 0 else 400\n    }"
    }
  ]
}